//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 color palettes.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 5 files.
  struct file {
    /// Resource file `backgroundMusic.mp3`.
    static let backgroundMusicMp3 = Rswift.FileResource(bundle: R.hostingBundle, name: "backgroundMusic", pathExtension: "mp3")
    /// Resource file `hitCat.wav`.
    static let hitCatWav = Rswift.FileResource(bundle: R.hostingBundle, name: "hitCat", pathExtension: "wav")
    /// Resource file `hitGranny.wav`.
    static let hitGrannyWav = Rswift.FileResource(bundle: R.hostingBundle, name: "hitGranny", pathExtension: "wav")
    /// Resource file `lose.wav`.
    static let loseWav = Rswift.FileResource(bundle: R.hostingBundle, name: "lose", pathExtension: "wav")
    /// Resource file `win.wav`.
    static let winWav = Rswift.FileResource(bundle: R.hostingBundle, name: "win", pathExtension: "wav")
    
    /// `bundle.url(forResource: "backgroundMusic", withExtension: "mp3")`
    static func backgroundMusicMp3(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.backgroundMusicMp3
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "hitCat", withExtension: "wav")`
    static func hitCatWav(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.hitCatWav
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "hitGranny", withExtension: "wav")`
    static func hitGrannyWav(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.hitGrannyWav
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "lose", withExtension: "wav")`
    static func loseWav(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.loseWav
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "win", withExtension: "wav")`
    static func winWav(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.winWav
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 12 images.
  struct image {
    /// Image `Cat`.
    static let cat = Rswift.ImageResource(bundle: R.hostingBundle, name: "Cat")
    /// Image `Defeat`.
    static let defeat = Rswift.ImageResource(bundle: R.hostingBundle, name: "Defeat")
    /// Image `First Background`.
    static let firstBackground = Rswift.ImageResource(bundle: R.hostingBundle, name: "First Background")
    /// Image `LaunchScreen`.
    static let launchScreen = Rswift.ImageResource(bundle: R.hostingBundle, name: "LaunchScreen")
    /// Image `Main Menu Background`.
    static let mainMenuBackground = Rswift.ImageResource(bundle: R.hostingBundle, name: "Main Menu Background")
    /// Image `Second Background`.
    static let secondBackground = Rswift.ImageResource(bundle: R.hostingBundle, name: "Second Background")
    /// Image `Victory`.
    static let victory = Rswift.ImageResource(bundle: R.hostingBundle, name: "Victory")
    /// Image `Women`.
    static let women = Rswift.ImageResource(bundle: R.hostingBundle, name: "Women")
    /// Image `Zombie1`.
    static let zombie1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Zombie1")
    /// Image `Zombie2`.
    static let zombie2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Zombie2")
    /// Image `Zombie3`.
    static let zombie3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Zombie3")
    /// Image `Zombie4`.
    static let zombie4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Zombie4")
    
    /// `UIImage(named: "Cat", bundle: ..., traitCollection: ...)`
    static func cat(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cat, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Defeat", bundle: ..., traitCollection: ...)`
    static func defeat(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.defeat, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "First Background", bundle: ..., traitCollection: ...)`
    static func firstBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.firstBackground, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "LaunchScreen", bundle: ..., traitCollection: ...)`
    static func launchScreen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.launchScreen, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Main Menu Background", bundle: ..., traitCollection: ...)`
    static func mainMenuBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mainMenuBackground, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Second Background", bundle: ..., traitCollection: ...)`
    static func secondBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.secondBackground, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Victory", bundle: ..., traitCollection: ...)`
    static func victory(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.victory, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Women", bundle: ..., traitCollection: ...)`
    static func women(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.women, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Zombie1", bundle: ..., traitCollection: ...)`
    static func zombie1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.zombie1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Zombie2", bundle: ..., traitCollection: ...)`
    static func zombie2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.zombie2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Zombie3", bundle: ..., traitCollection: ...)`
    static func zombie3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.zombie3, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Zombie4", bundle: ..., traitCollection: ...)`
    static func zombie4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.zombie4, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 0 nibs.
  struct nib {
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 0 reuse identifiers.
  struct reuseIdentifier {
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 0 view controllers.
  struct segue {
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 0 localization tables.
  struct string {
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct nib {
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try launchScreen.validate()
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if UIKit.UIImage(named: "LaunchScreen") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'LaunchScreen' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = GameViewController
      
      let bundle = R.hostingBundle
      let name = "Main"
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}